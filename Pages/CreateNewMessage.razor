@page "/newmessage"
@using Microsoft.AspNetCore.Components.Forms
@using InformNotifications.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="text-center">
    <h1>Create New Message</h1>
</div>

<div>
    <div class="content">
        <h3>Message Content:</h3>
        <div class="row"><InputTextArea @bind-Value="messageContent" rows="10"></InputTextArea></div>
    </div>

    <div class="mt-2 row">
        <button class="btn btn-outline-primary col-4" @onclick="CancelMessage">Cancel</button>
        <div class="col-4"></div>
        <div class="col-4"></div>
    </div>
</div>

<div class="mt-4 pt-4 pb-4 ps-4 pe-4">
    <h3>Recipients:</h3>
    <input type="search" class="form-control" placeholder="Search..." aria-label="Search" @bind-value="searchQuery" @bind-value:event="oninput">
    @* <div class="row justify-content-start mt-4">
        <button class="col btn btn-sm @(relationSettings == Relation.OnlyStudent ? "btn-primary" : "btn-outline-primary")" @onclick="() => relationSettings = Relation.OnlyStudent">Only Student</button>
        <button class="col btn btn-sm @(relationSettings == Relation.OnlyParents ? "btn-primary" : "btn-outline-primary")" @onclick="() => relationSettings = Relation.OnlyParents">Only Parents</button>
        <button class="col btn btn-sm @(relationSettings == Relation.Both ? "btn-primary" : "btn-outline-primary")" @onclick="() => relationSettings = Relation.Both">Students and Parents</button>
    </div> *@
    <div class="row justify-content-start mt-4">
        <button class="col btn btn-sm btn-outline-secondary" @onclick="SelectView">Select View</button>
        <button class="col btn btn-sm btn-outline-secondary" @onclick="DeselectView">Deselect View</button>
        <button class="col btn btn-sm btn-outline-secondary" @onclick="SelectAll">Select All</button>
        <button class="col btn btn-sm btn-outline-secondary" @onclick="DeselectAll">Deselect All</button>
    </div>
    <div class="row justify-content-start mt-2">
        <button class="col btn @(sortByName ? "btn-dark" : "btn-outline-dark")" @onclick="() => FilterOptions(FilterTypes.ByName)">Name</button>
        <button class="col btn @(sortByYear ? "btn-dark" : "btn-outline-dark")" @onclick="() => FilterOptions(FilterTypes.ByYear)">Year</button>
        <button class="col btn @(sortByEmail ? "btn-dark" : "btn-outline-dark")" @onclick="() => FilterOptions(FilterTypes.ByEmail)">Email</button>
        <button class="col btn @(sortByNumber ? "btn-dark" : "btn-outline-dark")" @onclick="() => FilterOptions(FilterTypes.ByNumber)">Phone</button>
    </div>

    @if (invalidRequest)
    {
        <div class="text-center text-danger lead mt-4">Error loading recipients!</div>
    }
    else if (students!.Count == 0)
    {
        <div class="text-center text-info lead mt-4">No recipients have been added yet!</div>
    }
    else
    {
        <div class="mt-1 overflow-scroll recipient-list">
            @foreach (var student in GetRecipientsSorted())
            {
                <div @onclick="() => SelectionLogic(student)" class="mb-1 ps-2 row justify-content-center text-center"
                    style="@(IsSelected(student) ? "background-color: rgb(124, 181, 255);" : "background-color: rgb(235, 235, 235);")">
                    
                    <div class="col">@student.FullName</div>
                    <div class="col">@student.GraduationYear</div>
                    <div class="col">@student.EmailAddress</div>
                    <div class="col">@student.PhoneNumber</div>
                </div>
            }
        </div>
    }
</div>

<div id="settings" class="mb-4">
    <div class="row justify-content-center mt-4 settings-btn">
        <button class="col btn @(relationSettings == Relation.OnlyStudent ? "btn-primary" : "btn-outline-primary")" @onclick="() => relationSettings = Relation.OnlyStudent">Only Student</button>
        <button class="col btn @(deliverProtocol == DeliverProtocol.SMS ? "btn-secondary" : "btn-outline-secondary")" @onclick="() => deliverProtocol = DeliverProtocol.SMS">SMS Message</button>
    </div>
    <div class="row justify-content-center mt-1 settings-btn">
        <button class="col btn @(relationSettings == Relation.OnlyParents ? "btn-primary" : "btn-outline-primary")" @onclick="() => relationSettings = Relation.OnlyParents">Only Parents</button>
        <button class="col btn @(deliverProtocol == DeliverProtocol.Email ? "btn-secondary" : "btn-outline-secondary")" @onclick="() => deliverProtocol = DeliverProtocol.Email">Email Message</button>
    </div>
    <div class="row justify-content-center mt-1 settings-btn">
        <button class="col btn @(relationSettings == Relation.Both ? "btn-primary" : "btn-outline-primary")" @onclick="() => relationSettings = Relation.Both">Students and Parents</button>
        <button class="col btn @(deliverProtocol == DeliverProtocol.Both ? "btn-secondary" : "btn-outline-secondary")" @onclick="() => deliverProtocol = DeliverProtocol.Both">SMS and Email</button>
    </div>
</div>

<div class="mt-4 mb-4 row">
    <button class="btn btn-outline-primary col-4" @onclick="CancelMessage">Cancel</button>
    <div class="col-4"></div>
    <button class="btn btn-success col-4" @onclick="SubmitContent">Send</button>
</div>

<div class="dialog-container">
    <form class="dialog-body">
        <div>asodfjasdofjao</div>
    </form>
</div>

@code
{
    string messageContent = string.Empty;
    List<Student>? students = new();
    bool invalidRequest = true;
    List<Student> selectedStudents = new();

    string searchQuery = "";
    Relation relationSettings = Relation.OnlyStudent;
    DeliverProtocol deliverProtocol = DeliverProtocol.SMS;

    bool sortByName = true;
    bool sortByYear = false;
    bool sortByEmail = false;
    bool sortByNumber = false;

    protected override async Task OnInitializedAsync()
    {
        students = await HttpClient.GetFromJsonAsync<List<Student>>(NavigationManager.BaseUri + "students");
        if (students is not null)
        {
            invalidRequest = false;
        }
    }

    async Task SubmitContent()
    {
        if (string.IsNullOrWhiteSpace(messageContent)) return;

        if (selectedStudents.Count == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "There are no recipients selected!");
            return;
        }

        messageContent += "\nSent to:\n";
        foreach (var student in selectedStudents)
        {
            messageContent += student.FullName + "\n";
        }

        messageContent += "Sent to ";
        switch (relationSettings)
        {
            case Relation.OnlyStudent:
                messageContent += "only students";
                break;
            case Relation.OnlyParents:
                messageContent += "only parents";
                break;
            case Relation.Both:
                messageContent += "both students and parents";
                break;
        }

        messageContent += "\nVia ";
        switch (deliverProtocol)
        {
            case DeliverProtocol.SMS:
                messageContent += "text";
                break;
            case DeliverProtocol.Email:
                messageContent += "email";
                break;
            case DeliverProtocol.Both:
                messageContent += "text and email";
                break;
        }

        await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "sentmessages", new SentMessage() { Contents = messageContent });
        
        NavigationManager.NavigateTo("/");
    }
}
