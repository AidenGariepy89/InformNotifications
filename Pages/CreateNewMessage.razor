@page "/newmessage"
@using Microsoft.AspNetCore.Components.Forms
@using InformNotifications.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="text-center">
    <h1>Create New Message</h1>
</div>

<div>
    <div class="content">
        <h3>Message Content:</h3>
        <div class="row"><InputTextArea @bind-Value="messageContent" rows="10"></InputTextArea></div>
    </div>

    <div class="mt-2 row">
        <button class="btn btn-outline-primary col-4" @onclick="CancelMessage">Cancel</button>
        <div class="col-4"></div>
        <button class="btn btn-success col-4" @onclick="SubmitContent">Send</button>
    </div>
</div>

<div class="mt-4 pt-4 pb-4 ps-4 pe-4">
    <h3>Recipients:</h3>
    <input type="search" class="form-control" placeholder="Search..." aria-label="Search" @bind-value="searchQuery" @bind-value:event="oninput">
    <div class="row justify-content-start mt-4">
        <button class="col btn btn-sm btn-outline-primary">Only Student</button>
        <button class="col btn btn-sm btn-outline-primary">Only Parents</button>
        <button class="col btn btn-sm btn-outline-primary">Students and Parents</button>
    </div>
    <div class="row justify-content-start mt-2">
        <button class="col btn btn-sm btn-outline-secondary" @onclick="SelectView">Select View</button>
        <button class="col btn btn-sm btn-outline-secondary" @onclick="DeselectView">Deselect View</button>
        <button class="col btn btn-sm btn-outline-secondary" @onclick="SelectAll">Select All</button>
        <button class="col btn btn-sm btn-outline-secondary" @onclick="DeselectAll">Deselect All</button>
    </div>
    <div class="row justify-content-start mt-2">
        <button class="col btn @(sortByName ? "btn-dark" : "btn-outline-dark")" @onclick="() => FilterOptions(FilterTypes.ByName)">Name</button>
        <button class="col btn @(sortByYear ? "btn-dark" : "btn-outline-dark")" @onclick="() => FilterOptions(FilterTypes.ByYear)">Year</button>
        <button class="col btn @(sortByEmail ? "btn-dark" : "btn-outline-dark")" @onclick="() => FilterOptions(FilterTypes.ByEmail)">Email</button>
        <button class="col btn @(sortByNumber ? "btn-dark" : "btn-outline-dark")" @onclick="() => FilterOptions(FilterTypes.ByNumber)">Phone</button>
    </div>

    @if (invalidRequest)
    {
        <div class="text-center text-danger lead mt-4">Error loading recipients!</div>
    }
    else if (students!.Count == 0)
    {
        <div class="text-center text-info lead mt-4">No recipients have been added yet!</div>
    }
    else
    {
        <div class="mt-1">
            @foreach (var student in GetRecipientsSorted())//students.Where(s => s.FullName.ToLower().Contains(searchQuery.ToLower())).OrderBy(s => s.LastName).ToList())
            {
                <div @onclick="() => SelectionLogic(student)" class="mb-1 ps-2 row justify-content-center text-center"
                    style="@(IsSelected(student) ? "background-color: rgb(124, 181, 255);" : "background-color: rgb(235, 235, 235);")">
                    
                    <div class="col">@student.FullName</div>
                    <div class="col">@student.GraduationYear</div>
                    <div class="col">@student.EmailAddress</div>
                    <div class="col">@student.PhoneNumber</div>
                </div>
            }
        </div>
    }
</div>

@code
{
    string messageContent = string.Empty;
    List<Student>? students = new();
    bool invalidRequest = true;
    List<Student> selectedStudents = new();

    string searchQuery = "";
    enum FilterTypes
    {
        ByName,
        ByYear,
        ByEmail,
        ByNumber
    }
    enum Relation
    {
        OnlyStudent,
        OnlyParents,
        Both
    }

    Relation relationSettings = Relation.OnlyStudent;

    bool sortByName = true;
    bool sortByYear = false;
    bool sortByEmail = false;
    bool sortByNumber = false;

    protected override async Task OnInitializedAsync()
    {
        students = await HttpClient.GetFromJsonAsync<List<Student>>(NavigationManager.BaseUri + "students");
        if (students is not null)
        {
            invalidRequest = false;
        }
    }
    
    void CancelMessage()
    {
        NavigationManager.NavigateTo("/");
    }

    async Task SubmitContent()
    {
        if (string.IsNullOrWhiteSpace(messageContent)) return;

        if (selectedStudents.Count == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "There are no recipients selected!");
            return;
        }

        messageContent += "\nSent to:\n";
        foreach (var student in selectedStudents)
        {
            messageContent += student.FullName + "\n";
        }

        await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "sentmessages", new SentMessage() { Contents = messageContent });
        
        NavigationManager.NavigateTo("/");
    }

    void FilterOptions(FilterTypes filterTypes)
    {
        switch (filterTypes)
        {
            case FilterTypes.ByName:
                sortByName = true;
                sortByYear = false;
                sortByEmail = false;
                sortByNumber = false;
                break;
            case FilterTypes.ByYear:
                sortByName = false;
                sortByYear = true;
                sortByEmail = false;
                sortByNumber = false;
                break;
            case FilterTypes.ByEmail:
                sortByName = false;
                sortByYear = false;
                sortByEmail = true;
                sortByNumber = false;
                break;
            case FilterTypes.ByNumber:
                sortByName = false;
                sortByYear = false;
                sortByEmail = false;
                sortByNumber = true;
                break;
        }
    }

    List<Student> GetRecipientsSorted()
    {
        if (sortByName)
        {
            return students!.Where(s => s.FullName.ToLower().Contains(searchQuery.ToLower())).OrderBy(s => s.LastName).ToList();
        }
        if (sortByYear)
        {
            return students!.Where(s => s.GraduationYear.ToLower().Contains(searchQuery.ToLower())).OrderBy(s => s.GraduationYear).ToList();
        }
        if (sortByEmail)
        {
            return students!.Where(s => s.EmailAddress.ToLower().Contains(searchQuery.ToLower())).OrderBy(s => s.EmailAddress).ToList();
        }
        if (sortByNumber)
        {
            return students!.Where(s => s.PhoneNumber.ToLower().Contains(searchQuery.ToLower())).OrderBy(s => s.PhoneNumber).ToList();
        }
        return students!;
    }

    void SelectionLogic(Student student)
    {
        if (selectedStudents.Contains(student))
        {
            selectedStudents.Remove(student);
        }
        else
        {
            selectedStudents.Add(student);
        }
    }

    bool IsSelected(Student student)
    {
        return selectedStudents.Contains(student);
    }

    void SelectView()
    {
        foreach (var student in GetRecipientsSorted())
        {
            if (!selectedStudents.Contains(student))
            {
                selectedStudents.Add(student);
            }
        }
    }

    void DeselectView()
    {
        foreach (var student in GetRecipientsSorted())
        {
            selectedStudents.Remove(student);
        }
    }

    void SelectAll()
    {
        selectedStudents.Clear();
        selectedStudents.AddRange(students!);
    }

    void DeselectAll()
    {
        selectedStudents.Clear();
    }
}
